// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// A simple shader to upscale and linearly "interpolate".
package main

//kage:unit pixels

func stretchForAspectOne(aspectFactor, x float) float {
	// Map -1..1 to -1..1 but slope at middle be aspectFactor (which is > 1)
	// Base function: f(t) = t / nrt(1 + t^n)
	// Assume t = r * x.
	// Scaled function: g(x) = f(r * x) / f(r).
	// Derivative at 0: nrt(1 + r^n).
	const n = T[".power"]
	r := pow(pow(aspectFactor, n) - 1, 1 / n)
	xr := x * r
	f := xr / pow(1 + pow(abs(xr), n), 1 / n)
	d := r / aspectFactor  // Actually r / pow(1 + pow(r, n), 1 / n).
	return f / d
}

func compressForAspectOne(aspectFactor, x float) float {
	// Map -1..1 to -1..1 but slope at middle be 1/aspectFactor (which is > 1)
	// Base function: f(t) = t / nrt(1 - t^n)
	// Assume t = r * x.
	// Scaled function: g(x) = f(r * x) / f(r).
	// Derivative at 0: nrt(1 - r^n).
	const n = T[".power"]
	r := pow(pow(aspectFactor, n) - 1, 1 / n) / aspectFactor
	xr := x * r
	f := xr / pow(1 - pow(abs(xr), n), 1 / n)
	d := r / aspectFactor  // Actually r / pow(1 - pow(r, n), 1 / n).
	return f / d
}

func adjustForAspect(aspectFactor float, pos vec2) vec2 {
	// T["if gt .power 1.0"]
	if aspectFactor > 1 {
		pos.y = stretchForAspectOne(aspectFactor, pos.y)
	} else if aspectFactor < 1 {
		pos.x = stretchForAspectOne(1 / aspectFactor, pos.x)
	}
	// T["else if lt .power 1.0"]
	if aspectFactor > 1 {
		pos.x = compressForAspectOne(aspectFactor, pos.x)
	} else if aspectFactor < 1 {
		pos.y = compressForAspectOne(1 / aspectFactor, pos.y)
	}
	// T["end"]
	return pos
}

func Fragment(position vec4, texCoord_ vec2, color vec4) vec4 {
	srcOrigin := imageSrc0Origin()
	srcSize := imageSrc0Size()
	srcHalfSize := srcSize * 0.5
	srcMid := srcOrigin + srcHalfSize
	dstSize := imageDstSize()

	dstPos := (texCoord_ - srcMid) / srcHalfSize  // to -1..1
	// aspectFactor: how much extra _height_ to make
	aspectFactor := (srcSize.x * dstSize.y) / (srcSize.y * dstSize.x)
	srcPos := adjustForAspect(aspectFactor, dstPos)
	texCoord := (srcPos * srcHalfSize) + srcMid  // from -1..1

	return imageSrc0UnsafeAt(texCoord)
}
