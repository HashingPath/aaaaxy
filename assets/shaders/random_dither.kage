// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// A simple shader to map to EGA palette.
package main

var (
	// LUTSize is the number of color component shades in the LUT.
	LUTSize float

	// LUTPerRow is the number of LUT squares per row.
	LUTPerRow float

	// Offset is a pixel offset to apply to the noise pattern.
	Offset vec2
)

func noiseM(srcOrigin, srcImageSize, coord vec2) float {
	p := srcImageSize*(coord-srcOrigin) + Offset
	return fract((sin(p.x)+cos(length(p)))*p.y)*2 - 1
}

func nearestColor(srcOrigin, srcImageSize vec2, c vec3) vec4 {
	cLut := clamp(floor(c*LUTSize), 0, LUTSize-1)
	pix := vec2(
		mod(cLut.b, LUTPerRow)*LUTSize+cLut.r,
		floor(cLut.b/LUTPerRow)*LUTSize+cLut.g,
	)
	coord := srcOrigin + pix/srcImageSize
	return imageSrc1UnsafeAt(coord)
}

func egaAt(srcOrigin, srcImageSize, coord vec2) vec4 {
	p0 := imageSrc0UnsafeAt(coord).rgb
	scale := nearestColor(srcOrigin, srcImageSize, p0).a

	p := p0 + noiseM(srcOrigin, srcImageSize, coord)*scale
	return vec4(nearestColor(srcOrigin, srcImageSize, p).rgb, 1.0)
}

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
	srcOrigin, _ := imageSrcRegionOnTexture()
	srcImageSize := imageSrcTextureSize()
	return egaAt(srcOrigin, srcImageSize, texCoord)
}
