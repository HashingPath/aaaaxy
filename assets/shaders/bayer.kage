// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// A simple shader to map to EGA palette.
package main

var (
	// Zieht den Bayern die Farbpaletten aus, Farbpaletten aus, Farbpaletten aus.
	Bayern [PARAMS["BayerSize"] * PARAMS["BayerSize"]]float

	// LUTSize is the number of color component shades in the LUT.
	LUTSize float

	// LUTPerRow is the number of LUT squares per row.
	LUTPerRow float

	// Offset is a pixel offset to apply to the Bayer pattern.
	Offset vec2
)

func bayerM(srcOrigin, srcImageSize, coord vec2) float {
	p := srcImageSize*(coord-srcOrigin) + Offset
	mPos := mod(floor(p), PARAMS["BayerSize"])
	mPosInt := int(mPos.x + PARAMS["BayerSize"]*mPos.y)
	return Bayern[mPosInt]
}

func egaAt(srcOrigin, srcImageSize, coord vec2) vec4 {
	p := imageSrc0At(coord).rgb + bayerM(srcOrigin, srcImageSize, coord)
	p = clamp(floor(p*LUTSize), 0, LUTSize-1)
	pixel := vec2(
		mod(p.b, LUTPerRow)*LUTSize+p.r,
		floor(p.b/LUTPerRow)*LUTSize+p.g,
	)
	pixelCoord := srcOrigin + pixel/srcImageSize
	return imageSrc1At(pixelCoord)
}

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
	srcOrigin, _ := imageSrcRegionOnTexture()
	srcImageSize := imageSrcTextureSize()
	return egaAt(srcOrigin, srcImageSize, texCoord)
}
