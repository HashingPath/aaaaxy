// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// A simple shader to map to EGA palette.
package main

var (
	Colors [PARAMS["ColorCount"]]vec3
	Bayers [PARAMS["BayerSize"]*PARAMS["BayerSize"]]float
	Offset vec2
)

func diff(a, b vec3) float {
	d := a - b
	/*
	// Redmean color difference.
	r_ := (a.r + b.r) * (0.5 * 255.0 / 256.0)
	return dot(vec3(2 + r_, 4, 3 - r_), d * d)
	*/
	// Brightness difference.
	return dot(vec3(0.3, 0.59, 0.11), d * d)
}

func bayerM(srcOrigin, srcImageSize, coord vec2) float {
	p := srcImageSize * (coord - srcOrigin) + Offset
	mPos := mod(floor(p), PARAMS["BayerSize"])
	mPosInt := int(mPos.x + PARAMS["BayerSize"]*mPos.y)
	return Bayers[mPosInt]
}

func egaAt(srcOrigin, srcImageSize, coord vec2) vec4 {
	p := imageSrc0At(coord).rgb + bayerM(srcOrigin, srcImageSize, coord)

	best := Colors[0]
	bestScore := diff(p, best)
	for i := 1; i < PARAMS["ColorCount"]; i++ {
		this := Colors[i]
		score := diff(p, this)
		if score < bestScore {
			best = this
			bestScore = score
		}
	}

	return vec4(best, 1)
}

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
	srcOrigin, _ := imageSrcRegionOnTexture()
	srcImageSize := imageSrcTextureSize()
	return egaAt(srcOrigin, srcImageSize, texCoord)
}
