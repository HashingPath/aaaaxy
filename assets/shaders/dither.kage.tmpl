// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// A simple shader to map to EGA palette.
package main

var (
	// T["if .BayerSize"]
	// Zieht den Bayern die Farbpaletten aus, Farbpaletten aus, Farbpaletten aus.
	// Range: 0 to 1 exclusive (e.g. for 4 levels, at 1/8, 3/8, 5/8, 7/8).
	Bayern [T[".BayerSize"] * T[".BayerSize"]]float
	// T["end"]

	// LUTSize is the number of color component shades in the LUT.
	LUTSize float

	// LUTPerRow is the number of LUT squares per row.
	LUTPerRow float

	// LUTWidth is the width of the LUT, to be used as a pointer to the second LUT.
	LUTWidth float

	// Offset is a pixel offset to apply to the Bayer pattern.
	Offset vec2
)

func noiseM(srcOrigin, srcImageSize, coord vec2) float {
	p := srcImageSize*(coord-srcOrigin) + Offset

	// T["if .BayerSize"]
	mPos := mod(floor(p), T[".BayerSize"])
	mPosInt := int(mPos.x + T[".BayerSize"]*mPos.y)
	return Bayern[mPosInt]
	// T["end"]

	// T["if .RandomDither"]
	// Looks very random.
	return fract((sin(p.x) + cos(length(p))) * p.y)
	// T["end"]

	// T["if .PlasticDither"]
	// As suggested in The Unreasonable Effectiveness of Quasirandom Sequences (Martin Roberts),
	// using a simple linear function based on the plastic number, composed with a triangle wave,
	// gives good results for bias.
	plastic := 1.32471795724474602596
	rBias := fract(dot(p, vec2(1.0/plastic, 1.0/plastic/plastic)))
	return clamp(abs(rBias-0.5) * 2.0, 0, 0.999)  // Exclude the boundary.
	// T["end"]
}

func nearestColor(srcOrigin, srcImageSize vec2, c vec3, i int) vec4 {
	cLut := clamp(floor(c*LUTSize), 0, LUTSize-1)
	cr := int(cLut.r)
	cg := int(cLut.g)
	cb := int(cLut.b)
	r := int(LUTPerRow)
	s := int(LUTSize)
	w := int(LUTWidth)
	cbrd := cb / r
	cbrr := cb - r*cbrd
	pixx := cbrr*s + cr + w*i
	pixy := cbrd*s + cg
	pix := vec2(pixx, pixy)
	coord := srcOrigin + pix/srcImageSize
	return imageSrc1UnsafeAt(coord)
}

// T["if .TwoColor"]

func dotDiff(a, b vec3) float {
	return dot(a*b, vec3(3.0, 4.0, 2.0))
}

func computeF(a, b, c vec3) float {
	// Find f so that colorDiff(a + f * (b - a), c) is minimal.
	v := b - a
	// TODO(divVerent): make this simply "if v == 0" once c01821c is in released Ebitengine.
	if v.x == 0 && v.y == 0 && v.z == 0 {
		return 0
	}
	u := c - a
	// Find f so that colorDiff(f * v - u, 0) is minimal.
	return clamp(dotDiff(u, v) / dotDiff(v, v), 0, 1)
}

func dither(srcOrigin, srcImageSize, coord vec2, p0 vec3) vec3 {
	// Read the colors.
	c0 := nearestColor(srcOrigin, srcImageSize, p0, 0).rgb
	c1 := nearestColor(srcOrigin, srcImageSize, p0, 1).rgb

	// Compute the fraction;
	f := computeF(c0, c1, p0)

	// Perform the dither.
	b := noiseM(srcOrigin, srcImageSize, coord)
	if b >= f {
		return c0
	} else {
		return c1
	}
}

// T["else"]

func dither(srcOrigin, srcImageSize, coord vec2, p0 vec3) vec3 {
	scale := nearestColor(srcOrigin, srcImageSize, p0, 0).a
	f := noiseM(srcOrigin, srcImageSize, coord)
	// Map to [-1..1].
	f = 2.0*f - 1.0
	p := p0 + f*scale
	return nearestColor(srcOrigin, srcImageSize, p, 0).rgb
}

// T["end"]

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
	srcOrigin, _ := imageSrcRegionOnTexture()
	srcImageSize := imageSrcTextureSize()
	p0 := imageSrc0UnsafeAt(texCoord).rgb
	return vec4(dither(srcOrigin, srcImageSize, texCoord, p0), 1.0)
}
