// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// A simple shader to map to EGA palette.
package main

var (
	// T["if .BayerSize"]
	// Zieht den Bayern die Farbpaletten aus, Farbpaletten aus, Farbpaletten aus.
	// Range: 0 to 1 exclusive (e.g. for 4 levels, at 1/8, 3/8, 5/8, 7/8).
	Bayern [T[".BayerSize"] * T[".BayerSize"]]float
	// T["end"]

	// LUTSize is the number of color component shades in the LUT.
	LUTSize float

	// LUTPerRow is the number of LUT squares per row.
	LUTPerRow float

	// Offset is a pixel offset to apply to the Bayer pattern.
	Offset vec2
)

func noiseM(srcOrigin, srcImageSize, coord vec2) float {
	p := srcImageSize*(coord-srcOrigin) + Offset

	// T["if .BayerSize"]
	mPos := mod(floor(p), T[".BayerSize"])
	mPosInt := int(mPos.x + T[".BayerSize"]*mPos.y)
	return Bayern[mPosInt]
	// T["end"]

	// T["if .RandomDither"]
	// Looks very random.
	return fract((sin(p.x) + cos(length(p))) * p.y)
	// T["end"]

	// T["if .PlasticDither"]
	// As suggested in The Unreasonable Effectiveness of Quasirandom Sequences (Martin Roberts),
	// using a simple linear function based on the plastic number, composed with a triangle wave,
	// gives good results for bias.
	plastic := 1.32471795724474602596
	rBias := fract(dot(p, vec2(1.0/plastic, 1.0/plastic/plastic)))
	return abs(rBias-0.5) * 2.0
	// T["end"]
}

func nearestColor(srcOrigin, srcImageSize vec2, c vec3) vec4 {
	cLut := clamp(floor(c*LUTSize), 0, LUTSize-1)
	pix := vec2(
		mod(cLut.b, LUTPerRow)*LUTSize+cLut.r,
		floor(cLut.b/LUTPerRow)*LUTSize+cLut.g,
	)
	coord := srcOrigin + pix/srcImageSize
	return imageSrc1UnsafeAt(coord)
}

// T["if .TwoColor"]

func dotDiff(a, b vec3) float {
	return dot(a*b, vec3(3.0, 4.0, 2.0))
}

func colorDiff(a, b vec3) float {
	// Weighted color difference.
	d := a - b
	return dotDiff(d, d)
}

func score0(a, b vec3) float {
	return colorDiff(a, b)
}

func score(a, b, c1, c2 vec3) float {
	return score0(a, b) + colorDiff(c1, c2)*0.01
}

func computeF(a, b, c vec3) float {
	// Find f so that colorDiff(a + f * (b - a), c) is minimal.
	u := c - a
	v := b - a
	// Find f so that colorDiff(f * v - u, 0) is minimal.
	return dotDiff(u, v) / dotDiff(v, v)
}

func dither(srcOrigin, srcImageSize, coord vec2, p0 vec3) vec3 {
	c0 := nearestColor(srcOrigin, srcImageSize, p0).rgb
	bestC1, bestF, bestDist := c0, 0.0, score0(c0, p0)
	// T["if .BayerSize"]
	const n = float(len(Bayern) - 1)
	// T["else"]
	const n = 15.0
	// T["end"]
	const ni = 1.0 / n
	const bmax = 0.5 * n
	for bayer := 1.0; bayer <= bmax; bayer += 1.0 {
		f := bayer * ni
		// NOTE: f > 0.5 is not needed, as that would make c1_ closer to p0 than c0,
		// which contradicts c0 being the nearest color.
		// Solve:
		//   c0 * (1 - f) + c1 * f = p0
		//   c1 = (p0 - c0 * (1 - f)) / f
		//   c1 = (p0 - c0) / f + c0
		c1_ := c0 + (p0-c0)/f
		c1 := nearestColor(srcOrigin, srcImageSize, c1_).rgb
		if c1 == c0 {
			// Each step moves c1_ closer to p0.
			// So once we get the same color once, we'll always get the same color.
			break
		}
		f = computeF(c0, c1, p0)
		c := mix(c0, c1, f)
		dist := score(c, p0, c0, c1)
		if dist < bestDist {
			bestC1 = c1
			bestF = f
			bestDist = dist
		}
	}

	// Swap colors if needed.
	arbitraryFactors := vec3(1.0, 1.618034, 0.618034)
	if dot(bestC1-c0, arbitraryFactors) < 0 {
		h := c0
		c0 = bestC1
		bestC1 = h
		bestF = 1.0 - bestF
	}

	// Perform the dither.
	b := noiseM(srcOrigin, srcImageSize, coord)
	if b >= bestF {
		return c0
	} else {
		return bestC1
	}
}

// T["else"]

func dither(srcOrigin, srcImageSize, coord vec2, p0 vec3) vec3 {
	scale := nearestColor(srcOrigin, srcImageSize, p0).a
	f := noiseM(srcOrigin, srcImageSize, coord)
	// Map to [-1..1].
	f = 2.0*f - 1.0
	p := p0 + f*scale
	return nearestColor(srcOrigin, srcImageSize, p).rgb
}

// T["end"]

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
	srcOrigin, _ := imageSrcRegionOnTexture()
	srcImageSize := imageSrcTextureSize()
	p0 := imageSrc0UnsafeAt(texCoord).rgb
	return vec4(dither(srcOrigin, srcImageSize, texCoord, p0), 1.0)
}
