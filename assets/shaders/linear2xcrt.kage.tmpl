// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// A simple shader to upscale and linearly "interpolate".
package main

//kage:unit pixels

// T["if .CRT"]

// Strength of the scan line effect.
// Full effect at value of 2.0 (scaled in calling code).
// As a rule of thumb, below 2x (720px) height, the effect should be left off
// because all it will do is cause Moir√©.
var ScanLineEffect float // [0.0, 2.0]

// Strength of the CRT bending effect. Matches k1 and k2 parameters of FFmpeg lenscorrection.
var CRTK1, CRTK2 float

func crtMap(srcOrigin, srcSize, in vec2) vec2 {
	// mapF chosen so that diagonal has length 2.
	// also correct for aspect.
	// I.e.:
	// length(srcSize * 0.5 * mapF) == 1.
	mapF := 2.0 / length(srcSize)
	srcMid := srcOrigin + srcSize*0.5
	inRel := (in - srcMid) * mapF
	inLen := length(inRel)
	inLen2 := inLen * inLen
	// outLen := inLen * (1.0 + inLen2 * (CRTK1 + inLen2 * CRTK2))
	// outRel := normalize(inRel) * outLen
	outFac := 1.0 + inLen2*(CRTK1+inLen2*CRTK2)
	outRel := inRel * outFac
	return srcMid + outRel/mapF
}

// T["end"]

func Fragment(position vec4, texCoord_ vec2, color vec4) vec4 {
	srcOrigin, srcSize := imageSrcRegionOnTexture()

	// T["if .CRT"]
	// Map texture coordinate to CRT.
	texCoord := crtMap(srcOrigin, srcSize, texCoord_)
	// T["else"]
	texCoord := texCoord_
	// T["end"]

	// Set up typical linear interpolation.
	tieBreaker := 0.5 / 256.0

	// T["if .CRT"]
	// Get the four texels, mapping outside to black.
	topLeft := texCoord - 0.5 + tieBreaker
	bottomRight := texCoord + 0.5 + tieBreaker
	a := imageSrc0At(topLeft)
	b := imageSrc0At(vec2(bottomRight.x, topLeft.y))
	c := imageSrc0At(vec2(topLeft.x, bottomRight.y))
	d := imageSrc0At(bottomRight)
	// T["else"]
	// Get the four texels, clamping to edge.
	srcMax := srcOrigin + srcSize - vec2(1, 1)
	topLeft := clamp(texCoord-0.5+tieBreaker, srcOrigin, srcMax)
	bottomRight := clamp(texCoord+0.5+tieBreaker, srcOrigin, srcMax)
	a := imageSrc0UnsafeAt(topLeft)
	b := imageSrc0UnsafeAt(vec2(bottomRight.x, topLeft.y))
	c := imageSrc0UnsafeAt(vec2(topLeft.x, bottomRight.y))
	d := imageSrc0UnsafeAt(bottomRight)
	// T["end"]

	// Mix them properly.
	f := fract(topLeft)

	// Reduce the blur to better match VGA-like scan line doubling.
	// With a factor of 2.0, we get 50% of the pixels as nearest and 50%
	// in the linear region. Also means that at 2x scaling or above, every
	// pixel value is guaranteed to occur unchanged _somewhere_.
	// When scaling 3x (from 360p to 1080p), this will change adjacent pixel
	// values of 0 1 to 0 1/6 5/6 1. The same can be done in ffmpeg by first
	// nearest-scaling to 2x then linear-scaling to 3x.
	f = clamp(0.5+(f-0.5)*2.0, 0.0, 1.0)

	// T["if .CRT"]
	// Scan line effect?
	row := texCoord.y
	fRow := fract(row)
	fMask := 1.0 - abs(fRow-0.5)*ScanLineEffect
	mask := vec4(fMask, fMask, fMask, 1.0)
	// Note: for 1080p (3x resolution), this will map every centeral pixel to full value,
	// but every other row to 1/3 its value.
	// We take that into account when generating the ffmpeg command.
	// T["else"]
	const mask = 1.0
	// T["end"]

	return mix(mix(a, b, f.x), mix(c, d, f.x), f.y) * mask
}
